1. Get the application URL by running these commands:
{{- if .Values.ingress.enabled }}
{{- range $host := .Values.ingress.hosts }}
  {{- range .paths }}
  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}
  {{- end }}
{{- end }}
{{- else if contains "NodePort" .Values.nginx.service.type }}
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "mytinytodo.fullname" . }})
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" .Values.nginx.service.type }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "mytinytodo.fullname" . }}'
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "mytinytodo.fullname" . }} --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo http://$SERVICE_IP:{{ .Values.nginx.service.port }}
{{- else if contains "ClusterIP" .Values.nginx.service.type }}
  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "mytinytodo.name" . }},app.kubernetes.io/instance={{ .Release.Name }}" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo "Visit http://127.0.0.1:8080 to use your application"
  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT
{{- end }}

2. To access the PostgreSQL database directly:
{{- if .Values.postgresql.enabled }}
  export POSTGRES_PASSWORD=$(kubectl get secret --namespace {{ .Release.Namespace }} {{ include "mytinytodo.postgresql.secretName" . }} -o jsonpath="{.data.postgres-password}" | base64 -d)
  
  # Connect to PostgreSQL
  kubectl run --namespace {{ .Release.Namespace }} postgresql-client --rm --tty -i --restart='Never' --image postgres:15 -- psql --host {{ include "mytinytodo.postgresql.host" . }} -U {{ include "mytinytodo.postgresql.username" . }} -d {{ include "mytinytodo.postgresql.database" . }} -p {{ include "mytinytodo.postgresql.port" . }}
{{- else }}
  # Using external PostgreSQL database at {{ .Values.externalDatabase.host }}:{{ .Values.externalDatabase.port }}
{{- end }}

3. To get the application salt (for configuration):
  export APP_SALT=$(kubectl get secret --namespace {{ .Release.Namespace }} {{ include "mytinytodo.fullname" . }}-app -o jsonpath="{.data.app-salt}" | base64 -d)
  echo $APP_SALT

4. To check the status of your deployment:
  kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "mytinytodo.name" . }},app.kubernetes.io/instance={{ .Release.Name }}"

5. To view logs:
  kubectl logs --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "mytinytodo.name" . }},app.kubernetes.io/instance={{ .Release.Name }}" -f

{{- if not .Values.postgresql.enabled }}
WARNING: You are using an external PostgreSQL database. Make sure it is accessible and properly configured.
{{- end }}

{{- if and .Values.postgresql.enabled (not .Values.postgresql.postgresql.auth.password) }}
WARNING: Using default PostgreSQL password. Please set a secure password for production use.
{{- end }}

UPGRADE NOTES:
If you encounter StatefulSet upgrade errors, use one of these approaches:
1. Force upgrade: helm upgrade {{ .Release.Name }} ./helm/mytinytodo --force
2. Manual cleanup: kubectl delete statefulset {{ include "mytinytodo.fullname" . }}-postgresql --cascade=orphan
   Then: helm upgrade {{ .Release.Name }} ./helm/mytinytodo