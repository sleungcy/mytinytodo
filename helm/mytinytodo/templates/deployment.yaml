apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "mytinytodo.fullname" . }}
  labels:
    {{- include "mytinytodo.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "mytinytodo.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        checksum/secret: {{ include (print $.Template.BasePath "/secret.yaml") . | sha256sum }}
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        {{- include "mytinytodo.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "mytinytodo.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
        - name: wait-for-postgres
          image: postgres:15-alpine
          command:
            - sh
            - -c
            - |
              until pg_isready -h {{ include "mytinytodo.postgresql.host" . }} -p {{ include "mytinytodo.postgresql.port" . }} -U $POSTGRES_USER; do
                echo "Waiting for PostgreSQL to be ready..."
                sleep 2
              done
              echo "PostgreSQL is ready!"
          env:
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "mytinytodo.postgresql.secretName" . }}
                  key: {{ include "mytinytodo.postgresql.secretKey" . }}
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: {{ include "mytinytodo.postgresql.secretName" . }}
                  key: {{ include "mytinytodo.postgresql.secretKey" . }}
            - name: POSTGRES_DB
              valueFrom:
                secretKeyRef:
                  name: {{ include "mytinytodo.postgresql.secretName" . }}
                  key: {{ include "mytinytodo.postgresql.secretKey" . }}
      containers:
        # PHP-FPM container
        - name: php-fpm
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: php-fpm
              containerPort: 9000
              protocol: TCP
          env:
            - name: MTT_DB_USER
              valueFrom:
                secretKeyRef:
                  name: {{ include "mytinytodo.postgresql.secretName" . }}
                  key: POSTGRES_USER

            - name: MTT_DB_NAME
              valueFrom:
                secretKeyRef:
                  name: {{ include "mytinytodo.postgresql.secretName" . }}
                  key: POSTGRES_DB
            - name: MTT_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "mytinytodo.postgresql.secretName" . }}
                  key: {{ include "mytinytodo.postgresql.secretKey" . }}
            - name: MTT_SALT
              valueFrom:
                secretKeyRef:
                  name: {{ include "mytinytodo.fullname" . }}-app
                  key: app-salt
          envFrom:
            - configMapRef:
                name: {{ include "mytinytodo.fullname" . }}-config
          {{- if .Values.healthcheck.enabled }}
          livenessProbe:
            tcpSocket:
              port: 9000
            initialDelaySeconds: {{ .Values.healthcheck.initialDelaySeconds }}
            periodSeconds: {{ .Values.healthcheck.periodSeconds }}
            timeoutSeconds: {{ .Values.healthcheck.timeoutSeconds }}
            failureThreshold: {{ .Values.healthcheck.failureThreshold }}
          readinessProbe:
            tcpSocket:
              port: 9000
            initialDelaySeconds: {{ .Values.healthcheck.initialDelaySeconds }}
            periodSeconds: {{ .Values.healthcheck.periodSeconds }}
            timeoutSeconds: {{ .Values.healthcheck.timeoutSeconds }}
            failureThreshold: {{ .Values.healthcheck.failureThreshold }}
          {{- end }}
          resources:
            {{- toYaml .Values.phpfpm.resources | nindent 12 }}
          volumeMounts:
            - name: app-storage
              mountPath: /var/www/html
            {{- if .Values.persistence.enabled }}
            - name: data
              mountPath: /var/www/html/src/db
            {{- end }}

        # Nginx container
        - name: nginx
          image: "{{ .Values.nginx.image.repository }}:{{ .Values.nginx.image.tag }}"
          imagePullPolicy: {{ .Values.nginx.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          {{- if .Values.healthcheck.enabled }}
          livenessProbe:
            httpGet:
              path: {{ .Values.healthcheck.path }}
              port: http
            initialDelaySeconds: {{ .Values.healthcheck.initialDelaySeconds }}
            periodSeconds: {{ .Values.healthcheck.periodSeconds }}
            timeoutSeconds: {{ .Values.healthcheck.timeoutSeconds }}
            failureThreshold: {{ .Values.healthcheck.failureThreshold }}
          readinessProbe:
            httpGet:
              path: {{ .Values.healthcheck.path }}
              port: http
            initialDelaySeconds: {{ .Values.healthcheck.initialDelaySeconds }}
            periodSeconds: {{ .Values.healthcheck.periodSeconds }}
            timeoutSeconds: {{ .Values.healthcheck.timeoutSeconds }}
            failureThreshold: {{ .Values.healthcheck.failureThreshold }}
          {{- end }}
          resources:
            {{- toYaml .Values.nginx.resources | nindent 12 }}
          volumeMounts:
            - name: app-storage
              mountPath: /var/www/html
              readOnly: true
            - name: nginx-config
              mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
              readOnly: true

      # Shared volumes
      volumes:
        - name: app-storage
          emptyDir: {}
        - name: nginx-config
          configMap:
            name: {{ include "mytinytodo.fullname" . }}-nginx-config
        {{- if .Values.persistence.enabled }}
        - name: data
          persistentVolumeClaim:
            claimName: {{ include "mytinytodo.fullname" . }}-data
        {{- end }}

      # Init container to copy app files to shared volume
      initContainers:
        - name: copy-app
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          command: ['sh', '-c', 'cp -r /var/www/html/* /shared/']
          volumeMounts:
            - name: app-storage
              mountPath: /shared
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}